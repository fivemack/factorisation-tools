#!/usr/bin/python3

# Run in a directory which has msieve.fb, worktodo.ini and some *lasieve*

import os,glob,re,shutil,subprocess,itertools,sys,time,argparse

parser = argparse.ArgumentParser(prog='progress-gnfs',
                                 description='Run more sieving over multiple threads until GNFS filtering generates a matrix',
                                 epilog='')

parser.add_argument('-s', type=int, default=13, help='Which lasieve4I to use')
parser.add_argument('-p', type=str, default="wibble", help='Project name (used for naming tempdir)')
parser.add_argument('-np', type=int, default=28, help='Number of processes to use (at least two)')

pa=parser.parse_args()

siever=pa.s
project_name=pa.p
np = pa.np

print([siever, project_name, np])

GNFS_SIEVER="/home/nfsworld/gnfs-batalov/gnfs-lasieve4I"+str(siever)+"e"
MSIEVE_EXE="/home/nfsworld/msieve"
MSIEVE_GPU_PATH="/home/nfsworld/modern-gpu-msieve/msieve_nfsathome"
MSIEVE_GPU_EXE=MSIEVE_GPU_PATH+"/msieve"

def build_msievedotdat():
    md=open(scratch_dir_name+"/msieve.dat","w")
    extant_files=glob.glob("gnfs.lasieve*")
    n=len(extant_files);ct=0;
    print("Concatenating files ...",file=sys.stderr)
    for f in extant_files:
        print("[%s/%s]\r" % (ct,n),end='',file=sys.stderr,flush=True)
        with open(f,"r") as ff:
            md.writelines(ff)
            ct=1+ct

def summarise_msievedotlog(fn):
    f=open(fn,"r")
    raw_relations=None
    uniq_relations=None
    ideals_count=None
    reduce_to=[0,0]
    free_relations=None
    for line in f:
        # reset at the start of each output stanza
        m = re.match(r'.*random seeds:', line)
        if (m != None):
            raw_relations = None
            uniq_relations = None
            ideals_count = None
            reduce_to = None
        m = re.match(r'.*found ([0-9]+) duplicates and ([0-9]+) unique relations',line)
        if (m != None and uniq_relations == None):
            uniq_relations = int(m.group(2))
        m = re.match(r'.*found ([0-9]+) hash collisions in ([0-9]+) relations',line)
        if (m != None and raw_relations == None):
            raw_relations = int(m.group(2))
        m = re.match(r'.*begin with ([0-9]+) relations and ([0-9]+) unique ideals',line)
        if (m != None and ideals_count == None):
            ideals_count = int(m.group(2))
        # we want the *last* reduce-to
        m = re.match(r'.*reduce to ([0-9]+) relations and ([0-9]+) ideals in.*',line)
        if (m != None):
            reduce_to = [int(m.group(1)), int(m.group(2))]
        # unless it actually concluded, in which case use that instead
        m = re.match(r'.*reduce to ([0-9]+) relation sets and ([0-9]+) unique ideals',line)
        if (m != None):
            reduce_to = [int(m.group(1)), int(m.group(2))]
        m = re.match(r'.*added ([0-9]+) free relations',line)
        if (m != None):
            free_relations = int(m.group(1))
    if reduce_to != None:
        if reduce_to[1]>reduce_to[0]:
            reduce_to="%s+%s=%s"%(reduce_to[0], reduce_to[1]-reduce_to[0], reduce_to[1])

    return("%s raw relations of which %s unique (%.1f%%); %s ideals; reduced to %s" % (raw_relations, uniq_relations-free_relations, 100.0*(uniq_relations-free_relations)/raw_relations, ideals_count, reduce_to))

ct=0
success=False
while (success == False):
    scratch_dir_name = "/scratch/auto-"+str(ct)+"-"+project_name
    try:
        os.makedirs(scratch_dir_name, exist_ok=False)
        success=True
    except:
        ct=1+ct

q_block=None
q_first=None
q_last=None
q_blocks=[]

extant_files=glob.glob("gnfs.lasieve*")
for u in extant_files:
    m=re.match(r'.*lasieve-(.)\.([0-9]+)-([0-9]+)',u)
    (side,start,end)=(int(m.group(1)),int(m.group(2)),int(m.group(3)))
#    print([side,start,end])
    q_blocks.append(end-start)
    if (q_first == None or start<q_first):
        q_first = start
    if (q_last == None or end>q_last):
        q_last = end

q_blocks.sort()
if (len(q_blocks)>6):
    q_block = q_blocks[len(q_blocks)//2]
        
print([q_block, q_first, q_last])

if (q_first==None or q_last==None):
    raise SystemExit("cannot figure out what GNFS has already been done")

if (q_block == None):
    q_block = 10000

shutil.copy2("msieve.fb",scratch_dir_name)
shutil.copy2("worktodo.ini",scratch_dir_name)

matrix_built = False

while (matrix_built == False):

    build_msievedotdat()

    processes = [[] for t in range(np)]
    n_sieves = np-1

    mm=[MSIEVE_EXE, '-v', '-nc1']
    processes[0] = subprocess.Popen(mm, stdin=subprocess.PIPE, stdout=subprocess.PIPE, cwd=scratch_dir_name)
    print("Launched msieve", file=sys.stderr)
    for i in range(1,np):
        sm=[GNFS_SIEVER, ['-a','-r'][side], 'gnfs', '-f', str(q_last+(i-1)*q_block), '-c' , str(q_block)]
        processes[i] = subprocess.Popen(sm, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("Launched siever %s .. +%s" % (q_last+(i-1)*q_block, q_block), file=sys.stderr)

    t0 = time.time()

    # so the msieve and the sievers are now all running
    # Wait for msieve to finish
    processes[0].wait()
    tm = time.time()

    print("msieve finished in %.1f s: %s" % (tm-t0, summarise_msievedotlog(scratch_dir_name+"/msieve.log")), file=sys.stderr)
    # And wait for all the other processes to finish
    for j in processes[1:]:
        j.wait()

    ts = time.time()
    print("sievers finished in %.1f s" % (ts-t0))

    if (glob.glob(scratch_dir_name+"/msieve.dat.cyc") != []):
        matrix_built = True
    else:
        q_last += n_sieves*q_block

    if (ts-t0 < tm-t0+60):
      print("msieve took longer than sievers; sieve further!")
      q_block = 2*q_block

# we built a matrix and did sieving last time, so redo the concatenation because we now have more relations
build_msievedotdat()

# do we have a GPU?
smi = subprocess.run(["nvidia-smi"])
if (smi.returncode == 0):
    for u in ["lanczos_kernel","stage1_core"]:
        shutil.copy2(MSIEVE_GPU_PATH+"/"+u+".ptx",scratch_dir_name)
    scratch_dir_cub=scratch_dir_name+"/cub"
    os.makedirs(scratch_dir_cub)
    for u in ["sort","spmv"]:
        shutil.copy2(MSIEVE_GPU_PATH+"/cub/"+u+"_engine.so",scratch_dir_cub)

    mm=[MSIEVE_GPU_EXE,'-g','0','-nc']
else:
    mm=[MSIEVE_EXE,'-nc','-t',str(np/2)]
subprocess.run(mm, cwd=scratch_dir_name)
shutil.copy2(scratch_dir_name+"/msieve.log","msieve.log")
